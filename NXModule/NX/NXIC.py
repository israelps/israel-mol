# -*- coding: utf-8 -*-
#This program generates all the inputs for Newton-X calculations. No need to run  NX's initcond creator.

import os
import shutil
from subprocess import Popen, PIPE

molec = raw_input("Project name:\n")
funct = raw_input("Functional:\n")
basis = raw_input("Basis:\n")
numero = raw_input("Number of initial conditions:\n")
path = raw_input("Path to Gaussian jobs:\n")
istate = raw_input("Initial state (1 for ground state):\n")
fstate = raw_input("Final state (2 for first excited, 3 for second etc):\n")
ESTADOS = str(int(fstate)-1)
CHARMUL = raw_input("Charge & Multiplicity:\n")
PROC = raw_input("nproc:\n")
MEM = raw_input("mem:\n")
SPLIT = int(raw_input("Split IC in:\n"))

def ExtractGeom(inp, outp):
	code = {"1" : "H", "2" : "He", "3" : "Li", "4" : "Be", "5" : "B", \
"6"  : "C", "7"  : "N", "8"  : "O",  "9" : "F", "10" : "Ne", \
"11" : "Na" , "12" : "Mg" , "13" : "Al" , "14" : "Si" , "15" : "P", \
"16" : "S"  , "17" : "Cl" , "18" : "Ar" , "19" : "K"  , "20" : "Ca", \
"21" : "Sc" , "22" : "Ti" , "23" : "V"  , "24" : "Cr" , "25" : "Mn", \
"26" : "Fe" , "27" : "Co" , "28" : "Ni" , "29" : "Cu" , "30" : "Zn", \
"31" : "Ga" , "32" : "Ge" , "33" : "As" , "34" : "Se" , "35" : "Br", \
"36" : "Kr" , "37" : "Rb" , "38" : "Sr" , "39" : "Y"  , "40" : "Zr", \
"41" : "Nb" , "42" : "Mo" , "43" : "Tc" , "44" : "Ru" , "45" : "Rh", \
"46" : "Pd" , "47" : "Ag" , "48" : "Cd" , "49" : "In" , "50" : "Sn", \
"51" : "Sb" , "52" : "Te" , "53" : "I"  , "54" : "Xe" , "55" : "Cs", \
"56" : "Ba" , "57" : "La" , "58" : "Ce" , "59" : "Pr" , "60" : "Nd", \
"61" : "Pm" , "62" : "Sm" , "63" : "Eu" , "64" : "Gd" , "65" : "Tb", \
"66" : "Dy" , "67" : "Ho" , "68" : "Er" , "69" : "Tm" , "70" : "Yb", \
"71" : "Lu" , "72" : "Hf" , "73" : "Ta" , "74" : "W"  , "75" : "Re", \
"76" : "Os" , "77" : "Ir" , "78" : "Pt" , "79" : "Au" , "80" : "Hg", \
"81" : "Tl" , "82" : "Pb" , "83" : "Bi" , "84" : "Po" , "85" : "At", \
"86" : "Rn" , "87" : "Fr" , "88" : "Ra" , "89" : "Ac" , "90" : "Th", \
"91" : "Pa" , "92" : "U"  , "93" : "Np" , "94" : "Pu" , "95" : "Am", \
"96" : "Cm" , "97" : "Bk" , "98" : "Cf" , "99" : "Es" ,"100" : "Fm", \
"101": "Md" ,"102" : "No" ,"103" : "Lr" ,"104" : "Rf" ,"105" : "Db", \
"106": "Sg" ,"107" : "Bh" ,"108" : "Hs" ,"109" : "Mt" ,"110" : "Ds", \
"111": "Rg" ,"112" : "Uub","113" : "Uut","114" : "Uuq","115" : "Uup", \
"116": "Uuh","117" : "Uus","118" : "Uuo"}
	mark = []
	with open(inp, "r") as input :
		for counter, line in enumerate(input) :
                    if "Input orientation:" not in line and "Standard orientation:" not in line:
				pass
		    else :
				mark.append(counter)
				mark = map(int, mark)
	with open(inp, "r") as input:	
		for count, line in enumerate(input) :
			if count > mark[len(mark)-1]+4:
					line = line.split()
					try:
						int(line[0])
						text = "%2s %16s %14s %14s\n" % (code[line[1]], line[3], line[4], line[5])
						with open(outp, 'a') as output: 
							output.write(text)
					except:
						break
			else :
				pass
	
			

#This function puts the xyz file generated by newzmat in a format that NX can read and convert
def Ajuste(input) :
	with open(input, "r") as f :
		count = 0
		texto = f.read()
	with open(input, "r") as f :
		for line in f :
			count = count +1	
	natoms = str(count)+"\n\n"
	with open(input, "w") as f :
		f.write(natoms+texto)
	return texto	

# This function reads the initqp template and generates a file for each input
def initqp(xyz, SPLIT, num, freq, initial, final) :
	with open(xyz, "r") as f :
		count = 0
		for line in f :
			count = count +1
		natoms = str(count -2)
	number = str(num)	
	if SPLIT > 1:
		semente = "-1"
	else :
		semente = "0"
	with open("../../../Templates/initqp_template", "r") as input :
		texto = input.read().replace("natoms", natoms).replace("numero", number).replace("freq", freq).replace("semente", semente).replace("istate",initial).replace("fstate",final)
	with open("initqp_input", "w") as output :
		output.write(texto)

#Runs the script that splits the initial conditions in 10 		
def splitic(number) :
	p = Popen(["$NX/split_initcond.pl"], stdin=PIPE, stdout=PIPE, shell=True)
	p.communicate(number+'\nn\n')
		
#Copies all relevant files from prior Gaussian calculations and generates all the inputs 				
try:
	os.makedirs(molec)
except:
	pass
os.chdir(molec)
os.system("cp "+path+"/*Geom*.log .")
os.system("cp "+path+"/*Freq*.log .")
files = os.listdir(".")
gaussian = []
for file in files:
	if file.find("Geom") == -1:
		pass
	else :
		gaussian.append(file)
for file in files:
	if file.find("Freq") == -1:
		pass
	else :
		gaussian.append(file)
ExtractGeom(gaussian[0], molec+".xyz")
geometria = Ajuste(molec+".xyz")
os.system("$NX/xyz2nx < "+molec+".xyz")
try:
	os.makedirs("IC")
except:
	pass
os.chdir("IC")
initqp("../"+molec+".xyz", SPLIT, numero, gaussian[1], istate, fstate)
os.chdir("..")
os.system("cp "+gaussian[1]+" IC")
os.system("cp geom IC")
os.system("cp -R ../../Templates/JOB_AD IC")
os.chdir("IC")
os.chdir("JOB_AD")
with open("gaussian.com", "r") as input :
	texto = input.read().replace("geometria", geometria+"\n\n").replace("molecula", molec).replace("PROC", PROC).replace("funcional", funct).replace("basis", basis).replace("MEM", MEM).replace("ESTADOS", ESTADOS).replace("CHARMUL", CHARMUL)
with open("gaussian.com", "w") as output :
	output.write(texto)
with open("basis", "w") as f:
	f.write(basis+"\n")
os.chdir("..")
if SPLIT > 1 :
	splitic(str(SPLIT))
	os.chdir("..")
else :
	os.chdir("..")
os.chdir("..")	
		   

		  
		
		
		
